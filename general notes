---con npx -- con create-react-app
npx create-react-app my-app
cd my-app
npm start
---

## rafc crea un nuevo component

---> correr npm run dev

gist primera parte: https://gist.github.com/Klerith/b0111f52ba16451d095f38d4c995605b
repo completo: https://github.com/Klerith/react-intro-javascript

---vite es mas rapido
con npm--> pnpm create vite

ctrl + shift + p==>orden asc

---

import {useState} from 'react'

--PRUEBAS
--Muchos mencionan que el 100% es malo porque el código queda muy rígido, pero eso significaría que el testing --está mal hecho, porque el testing a la vez debe de ser flexible.

-- instalar jest --> npm install --save-dev jest
-- instalar los types --> pnpm add -D @types/jest
-- instalar babel --> pnpm add --save-dev babel-jest @babel/core @babel/preset-env
-- generar el archivo babel.config.cjs

--> correrlos --> npm run test
--> console.log()--> screen.debug();

-- si no aparecen los métodos del test---
Hay que crear, en la raíz de nuestro proyecto, un archivo jsconfig.json con el siguiente código:

{ "typeAcquisition": { "include": [ "jest" ] } }

Cambiar extensión de los archivos jest.config.js y babel.config.js a .cjs

instalar react testing library --> pnpm add --save-dev @testing-library/react
instalar Jest-Dom --> pnpm add -D jest-environment-jsdom

pnpm i --save-dev jest babel-jest @babel/preset-env @babel/preset-react
pnpm i --save-dev @testing-library/react @types/jest jest-environment-jsdom
pnpm - --save-dev whatwg-fetch

---

no usar push cuando añadimos a una lista

--
useState mantiene/guarda/recuerda los valores de tu Componente, esto es en lo que React se "especializa" o el principal trabajo que hace.

useEffect (disparar efectos secundarios) es como un puente entre tu componente y el mundo exterior, como:

- API en un servidor remoto: Donde quieres recibir informacion y mostrarlo en tu Componente (actualizando su estado).

- Eventos del mouse en la pantalla: Puedes escuchar estos eventos y actualizar tu estado del Componente.
  seEffect tambien nos permite ejecuta codigo si el componente es re-renderizado o las dependencias del mismo cambian.

Component: Una función que renderiza una parte de la aplicación cuando cambia el estado de algo (Usando hooks)

Custom Hook: Una función que hace algo especifica utilizando el estado (hooks) pero NO renderiza

Helper: Como su nombre lo induce, una función que ayuda a hacer un proceso especifico, pero no utiliza el estado

--
generar build : npm run build

--
desplegar a githubpages
cambiar dist --> docs ir a github, ir a settings ir a pages seleccionar main y docs
